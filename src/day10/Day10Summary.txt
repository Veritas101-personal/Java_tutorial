오버라이딩
- 상속받은 자식 클래스에서 부모 클래스의 메소드를 재정의
1. 부모 클래스의 메소드의 선언부가완전 동일

오버로딩
- 동일한 메소드명을 가진 메소드가 여러개인 경우
1. 매개변수의 갯수가 다름
2. 매개변수의 타입이 다름

상속(extends): 부모 클래스에 있는 멤버 변수와 메소드
- 단, 상속을 받아도 다 사용할 수 있는건 아님 (private로 정의된 변수, 메소드는 불가; 상속받는 건 가능하지만 사용 불가)

추상 클래스
- 추상 메소드를 가진 클래스

추상 메소드
- 메소드가 선언만 되어 있고 구현이 안된 메소드
abstract 리턴타입 메소드명(매개변수);
- 부모클래스를 상속 받았을 때 특정 메소드가 자식 클래스에서 자주 오버라이딩이 된다면
해당 메소드는 주로 추상 메소드 작성

추상 메소드가 있는 클래스를 상속 받으면 반드시 추상 메소드를 구현해야 한다.(오버라이딩)

인터페이스는 상수와 추상 메소드만 가질 수 있다.
인터페이스는 interface라는 키워드를 사용
인터페이스는 기능 요약서

인터페이스는 자체적으로 사용 불가, 인터페이스를 구현한 클래스로 활용함으로 사용(implements)

인터페이스는 멤버변수가 없기 때문에 기능을 메소드로 정리할 때 항상 이를 염두하고 작성할 것

클래스의 상속 : 부모가 1명
인터페이스의 상속 : 부모가 여러명 일 수 있다.(다중상속)
- 클래스는 부모가 가진 동일한 메소드의 이름이 중첩되면 이를 구분할 수 없기 때문에 불가
- 인터페이스는 상속을 받으려해도 적용 가능한 멤버변수가 없기 때문에 가능

클래스는 interface를 이용하여구현도 가능하고 상속도 가능
class A extends B implements C{ => 그래서 이런 방식으로도 작성 가능

} 

A,B : 클래스
C : 인터페이스 